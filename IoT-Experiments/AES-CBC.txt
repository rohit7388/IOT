/*******************************************************************************
* File Name:   main.c
*
* Description: This is the source code for the Empty Application Example
*              for ModusToolbox.
*
* Related Document: See README.md
*
*
*******************************************************************************
* Copyright 2021-2024, Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
*
* This software, including source code, documentation and related
* materials ("Software") is owned by Cypress Semiconductor Corporation
* or one of its affiliates ("Cypress") and is protected by and subject to
* worldwide patent protection (United States and foreign),
* United States copyright laws and international treaty provisions.
* Therefore, you may use this Software only as provided in the license
* agreement accompanying the software package from which you
* obtained this Software ("EULA").
* If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
* non-transferable license to copy, modify, and compile the Software
* source code solely for use in connection with Cypress's
* integrated circuit products.  Any reproduction, modification, translation,
* compilation, or representation of this Software except as specified
* above is prohibited without the express written permission of Cypress.
*
* Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
* reserves the right to make changes to the Software without notice. Cypress
* does not assume any liability arising out of the application or use of the
* Software or any product or circuit described in the Software. Cypress does
* not authorize its products for use in any products where a malfunction or
* failure of the Cypress product may reasonably be expected to result in
* significant property damage, injury or death ("High Risk Product"). By
* including Cypress's product in a High Risk Product, the manufacturer
* of such system or application assumes all risk of such use and in doing
* so agrees to indemnify Cypress against all liability.
*******************************************************************************/

/*******************************************************************************
* Header Files
*******************************************************************************/
#if defined (CY_USING_HAL)
#include "cyhal.h"
#endif
#include "cybsp.h"
#include "cy_retarget_io.h"
#include "aes.h"
#include "ctr_drbg.h"
#include "entropy.h"

/******************************************************************************
* Macros
*******************************************************************************/


/*******************************************************************************
* Global Variables
*******************************************************************************/


/*******************************************************************************
* Function Prototypes
*******************************************************************************/


/*******************************************************************************
* Function Definitions
*******************************************************************************/
void print_uint8_data(uint8_t* data, size_t len){
	for(uint8_t i=0;i < len;i++){
		if((i%16 == 0)){
			printf("\r\n");
		}
		printf("%d ",*(data+i));
	}
	printf("\r\n");

}

uint8_t* XOR(uint8_t* m,uint8_t* iv){
	uint8_t result[16]={0};
	for(int i=0;i<16;i++){
		result[i]=m[i]^iv[i];
	}
	return result;
}
/*******************************************************************************
* Function Name: main
*********************************************************************************
* Summary:
* This is the main function for CPU. It...
*    1.
*    2.
*
* Parameters:
*  void
*
* Return:
*  int
*
*******************************************************************************/
int main(void)
{
    cy_rslt_t result;

#if defined (CY_DEVICE_SECURE) && defined (CY_USING_HAL)
    cyhal_wdt_t wdt_obj;

    /* Clear watchdog timer so that it doesn't trigger a reset */
    result = cyhal_wdt_init(&wdt_obj, cyhal_wdt_get_max_timeout_ms());
    CY_ASSERT(CY_RSLT_SUCCESS == result);
    cyhal_wdt_free(&wdt_obj);
#endif

    /* Initialize the device and board peripherals */
    result = cybsp_init();

    /* Board init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Enable global interrupts */
    __enable_irq();

    result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX,
       		CY_RETARGET_IO_BAUDRATE);


    if (result != CY_RSLT_SUCCESS)
    	{
    	   CY_ASSERT(0);
    	}
    printf("\x1b[2J\x1b[;H");
    printf("PSOC_PROTOTYPING_KIT template is ready to start.\r\n");

    uint8_t data[16] = {0};
       uint8_t input1[128] = {1, 2, 3, 4, 1,4,5,5,5,5,5,5,5,5,5,7,5,5,55,5,5,5,5,5};
       uint8_t output[128] = {0};
       uint8_t decrypted[128] = {0};
       uint8_t iv[16] = {1, 2, 3, 4};
       uint8_t iv2[16]={0};
       memcpy(iv2,iv,16);


       mbedtls_ctr_drbg_context memory;
       mbedtls_entropy_context entropy;
       mbedtls_aes_context aes;

       mbedtls_ctr_drbg_init(&memory);
       mbedtls_entropy_init(&entropy);
       mbedtls_aes_init(&aes);

       mbedtls_ctr_drbg_seed(&memory, mbedtls_entropy_func, &entropy, (const unsigned char *)"pancham", 7);
       mbedtls_ctr_drbg_random(&memory, data, sizeof(data));

       mbedtls_aes_setkey_enc(&aes, data, sizeof(data) * 8);
       uint8_t xor_result[16];
       for (size_t j = 0; j < sizeof(input1); j += 16)
       {
           uint8_t *block = &input1[j];

           for (size_t i = 0; i < 16; i++) {
               xor_result[i] = block[i] ^ iv[i];
           }
           mbedtls_aes_crypt_ecb(&aes, MBEDTLS_AES_ENCRYPT, xor_result, &output[j]);
           memcpy(iv, &output[j], 16);
       }



       print_uint8_data(output, 128);



       mbedtls_aes_setkey_dec(&aes, data, sizeof(data) * 8);

       for (size_t j = 0; j < sizeof(input1); j += 16)
       {
           uint8_t xor_result[16];
           mbedtls_aes_crypt_ecb(&aes, MBEDTLS_AES_DECRYPT, &output[j], &decrypted[j]);
           for (size_t i = 0; i < 16; i++) {
               decrypted[j + i] ^= iv2[i];
           }
           memcpy(iv2, &output[j], 16);
       }






       print_uint8_data(decrypted, 128);

       mbedtls_ctr_drbg_free(&memory);
       mbedtls_entropy_free(&entropy);
       mbedtls_aes_free(&aes);

       return 0;
    for (;;)
    {
    }
}

/* [] END OF FILE */