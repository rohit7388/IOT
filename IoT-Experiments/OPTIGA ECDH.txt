OPTIGA ECDH /*******************************************************************************
* File Name:   main.c
*
* Description: This is the source code for the Empty Application Example
*              for ModusToolbox.
*
* Related Document: See README.md
*
*
*******************************************************************************
* Copyright 2021-2024, Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
*
* This software, including source code, documentation and related
* materials ("Software") is owned by Cypress Semiconductor Corporation
* or one of its affiliates ("Cypress") and is protected by and subject to
* worldwide patent protection (United States and foreign),
* United States copyright laws and international treaty provisions.
* Therefore, you may use this Software only as provided in the license
* agreement accompanying the software package from which you
* obtained this Software ("EULA").
* If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
* non-transferable license to copy, modify, and compile the Software
* source code solely for use in connection with Cypress's
* integrated circuit products.  Any reproduction, modification, translation,
* compilation, or representation of this Software except as specified
* above is prohibited without the express written permission of Cypress.
*
* Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
* reserves the right to make changes to the Software without notice. Cypress
* does not assume any liability arising out of the application or use of the
* Software or any product or circuit described in the Software. Cypress does
* not authorize its products for use in any products where a malfunction or
* failure of the Cypress product may reasonably be expected to result in
* significant property damage, injury or death ("High Risk Product"). By
* including Cypress's product in a High Risk Product, the manufacturer
* of such system or application assumes all risk of such use and in doing
* so agrees to indemnify Cypress against all liability.
*******************************************************************************/

/*******************************************************************************
* Header Files
*******************************************************************************/
#if defined (CY_USING_HAL)
#include "cyhal.h"
#endif
#include "cybsp.h"
#include "cy_retarget_io.h"
#include "optiga_util.h"
#include "optiga_crypt.h"

/******************************************************************************
* Macros
*******************************************************************************/


/*******************************************************************************
* Global Variables
*******************************************************************************/


/*******************************************************************************
* Function Prototypes
*******************************************************************************/


/*******************************************************************************
* Function Definitions
*******************************************************************************/
void print_uint8_data(uint8_t data[], size_t len){
	for(uint8_t i=0;i < len;i++){
		if((i%16 == 0)){
			printf("\r\n");
		}
		printf("%d ",data[i]);
	}
	printf("\r\n");

}
/*******************************************************************************
* Function Name: main
*********************************************************************************
* Summary:
* This is the main function for CPU. It...
*    1.
*    2.
*
* Parameters:
*  void
*
* Return:
*  int
*
*******************************************************************************/
int main(void)
{
    cy_rslt_t result;

#if defined (CY_DEVICE_SECURE) && defined (CY_USING_HAL)
    cyhal_wdt_t wdt_obj;

    /* Clear watchdog timer so that it doesn't trigger a reset */
    result = cyhal_wdt_init(&wdt_obj, cyhal_wdt_get_max_timeout_ms());
    CY_ASSERT(CY_RSLT_SUCCESS == result);
    cyhal_wdt_free(&wdt_obj);
#endif

    /* Initialize the device and board peripherals */
    result = cybsp_init();

    /* Board init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Enable global interrupts */
    __enable_irq();

    result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX,
          		CY_RETARGET_IO_BAUDRATE);


       if (result != CY_RSLT_SUCCESS)
       	{
       	   CY_ASSERT(0);
       	}

       printf("\x1b[2J\x1b[;H");

       printf("Hello World\r\n");
       optiga_lib_status_t op_status = OPTIGA_UTIL_BUSY; //initially unttil operation is being done, status remains busy
            optiga_lib_status_t api_status;

            void func(void* callback_ctx, optiga_lib_status_t event){
         	   op_status = event;

            }

            optiga_util_t* opt_util= optiga_util_create(0,func,NULL);
            if(opt_util==NULL){
         	   printf("OPTIGA UTIL COULDNT BE CREATED\r\n");
         	   CY_ASSERT(0);
            }

            api_status = optiga_util_open_application(opt_util,0);
            if(api_status!=OPTIGA_UTIL_SUCCESS){
         	   printf("API STATUS NOT SUCESSFULL\r\n");
         	      	   CY_ASSERT(0);
            }
            while(op_status==OPTIGA_UTIL_BUSY);

            if(op_status == OPTIGA_UTIL_SUCCESS){
         	   printf("API OPERATION SUCESSFULL\r\n");
            }else{
         	   printf("API OPERATION FAILURE\r\n");
         	  CY_ASSERT(0);
            }



            //CRYPT
            op_status = OPTIGA_CRYPT_BUSY;
            optiga_crypt_t* crypt_util = optiga_crypt_create(0,func,NULL);

            if(crypt_util==NULL){
                    	   printf("OPTIGA CRYPT COULDNT BE CREATED\r\n");
                    	   CY_ASSERT(0);
            }

            //Alice
            optiga_key_id_t private_alice = OPTIGA_KEY_ID_E0F2;
            uint8_t public_alice[100]={0};
            uint16_t public_alice_length = sizeof(public_alice)/sizeof(public_alice[0]);

         api_status = optiga_crypt_ecc_generate_keypair(crypt_util, OPTIGA_ECC_CURVE_NIST_P_256, OPTIGA_KEY_USAGE_KEY_AGREEMENT , 0, (void*)&private_alice, public_alice, &public_alice_length);
//            uint8_t key[16]={2,3,2,0,0,4};


         if(api_status!=OPTIGA_UTIL_SUCCESS){
                 	   printf("API STATUS NOT SUCESSFULL\r\n");
                 	      	   CY_ASSERT(0);
                    }
                    while(op_status==OPTIGA_UTIL_BUSY);

                    if(op_status == OPTIGA_UTIL_SUCCESS){
                    	op_status = OPTIGA_UTIL_BUSY;
                 	   printf("API OPERATION SUCESSFULL\r\n");
                    }else{
                 	   printf("API OPERATION FAILURE\r\n");
                 	  CY_ASSERT(0);
                    }

                    //Bob
                     optiga_key_id_t private_bob = OPTIGA_KEY_ID_E0F3;
                     uint8_t public_bob[100]={0};
                     uint16_t public_bob_length = sizeof(public_bob)/sizeof(public_bob[0]);

                     api_status = optiga_crypt_ecc_generate_keypair(crypt_util, OPTIGA_ECC_CURVE_NIST_P_256, OPTIGA_KEY_USAGE_KEY_AGREEMENT , 0, (void*)&private_bob, public_bob, &public_bob_length);



                    if(api_status!=OPTIGA_UTIL_SUCCESS){
                              printf("API STATUS NOT SUCESSFULL\r\n");
                              CY_ASSERT(0);
                    }

                    while(op_status==OPTIGA_UTIL_BUSY);

                    if(op_status == OPTIGA_UTIL_SUCCESS){
                       op_status = OPTIGA_UTIL_BUSY;
                       printf("API OPERATION SUCESSFULL\r\n");
                    }else{
                        printf("API OPERATION FAILURE\r\n");
                        CY_ASSERT(0);
                    }

                    //Alice struct

                    public_key_from_host_t alice;
                    alice.key_type= OPTIGA_ECC_CURVE_NIST_P_256;
                    alice.length = public_alice_length;
                    alice.public_key = public_alice;

                    //Bob struct
                    public_key_from_host_t bob;
                    bob.key_type= OPTIGA_ECC_CURVE_NIST_P_256;
                    bob.length = public_bob_length;
                    bob.public_key = public_bob;

                    uint8_t shared_alice[100]={0};
                    uint8_t shared_bob[100]={0};

                    //Generate shared secret for alice
                    api_status=optiga_crypt_ecdh(crypt_util, private_alice, &bob, 1, shared_alice);

                    if(api_status!=OPTIGA_UTIL_SUCCESS){
                              printf("API STATUS NOT SUCESSFULL\r\n");
                              CY_ASSERT(0);
                    }

                    while(op_status==OPTIGA_UTIL_BUSY);

                    if(op_status == OPTIGA_UTIL_SUCCESS){
                       op_status = OPTIGA_UTIL_BUSY;
                       printf("API OPERATION SUCESSFULL\r\n");
                    }else{
                        printf("API OPERATION FAILURE\r\n");
                        CY_ASSERT(0);
                    }

                    //Generate shared secret for bob

                    api_status=optiga_crypt_ecdh(crypt_util, private_bob, &alice, 1, shared_bob);

                                        if(api_status!=OPTIGA_UTIL_SUCCESS){
                                                  printf("API STATUS NOT SUCESSFULL\r\n");
                                                  CY_ASSERT(0);
                                        }

                                        while(op_status==OPTIGA_UTIL_BUSY);

                                        if(op_status == OPTIGA_UTIL_SUCCESS){
                                           op_status = OPTIGA_UTIL_BUSY;
                                           printf("API OPERATION SUCESSFULL\r\n");
                                        }else{
                                            printf("API OPERATION FAILURE\r\n");
                                            CY_ASSERT(0);
                                        }


                      printf("Alice shared secret: \r\n");
                      print_uint8_data(shared_alice, 32);
                      printf("bob shared secret: \r\n");
                      print_uint8_data(shared_bob, 32);



            //CLOSE APPLICATION
            api_status = optiga_crypt_destroy(crypt_util);

            if(api_status != OPTIGA_LIB_SUCCESS){
                    printf("CRYPT DESTROY FAILURE\r\n");
                    CY_ASSERT(0);
            }

            op_status = OPTIGA_CRYPT_BUSY;
            api_status = optiga_util_close_application(opt_util, 0);
            if(api_status!=OPTIGA_UTIL_SUCCESS){
                    	   printf("API STATUS NOT SUCESSFULL AT CLOSING\r\n");
                    	      	   CY_ASSERT(0);
                       }
                       while(op_status==OPTIGA_UTIL_BUSY);

                       if(op_status == OPTIGA_UTIL_SUCCESS){
                    	   printf("API OPERATION FOR CLOSING SUCESSFULL\r\n");
                       }else{
                    	   printf("API OPERATION FAILURE FOR CLOSING\r\n");
                    	  CY_ASSERT(0);
                       }

                       optiga_util_destroy(opt_util);








    for (;;)
    {
    }
}

/* [] END OF FILE */